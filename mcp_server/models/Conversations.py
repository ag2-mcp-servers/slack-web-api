# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:25:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field

from . import (
    DefsDmId,
    DefsOkFalse,
    DefsOkTrue,
    DefsTeam,
    DefsTs,
    DefsUserId,
    ObjsConversation,
    ObjsMessage,
    ObjsUserProfileShort,
)


class ArchivePostRequest(BaseModel):
    channel: Optional[str] = Field(None, description='ID of conversation to archive')


class ArchivePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class Error(Enum):
    method_not_supported_for_channel_type = 'method_not_supported_for_channel_type'
    missing_scope = 'missing_scope'
    not_supported = 'not_supported'
    channel_not_found = 'channel_not_found'
    already_archived = 'already_archived'
    cant_archive_general = 'cant_archive_general'
    restricted_action = 'restricted_action'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    user_is_bot = 'user_is_bot'
    user_is_restricted = 'user_is_restricted'
    user_is_ultra_restricted = 'user_is_ultra_restricted'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    team_added_to_org = 'team_added_to_org'
    missing_charset = 'missing_charset'
    superfluous_charset = 'superfluous_charset'


class ArchivePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: Error
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class ClosePostRequest(BaseModel):
    channel: Optional[str] = Field(None, description='Conversation to close.')


class ClosePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    already_closed: Optional[bool] = None
    no_op: Optional[bool] = None
    ok: DefsOkTrue


class ErrorModel(Enum):
    method_not_supported_for_channel_type = 'method_not_supported_for_channel_type'
    channel_not_found = 'channel_not_found'
    user_does_not_own_channel = 'user_does_not_own_channel'
    missing_scope = 'missing_scope'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class ClosePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class CreatePostRequest(BaseModel):
    is_private: Optional[bool] = Field(
        None, description='Create a private channel instead of a public one'
    )
    name: Optional[str] = Field(
        None, description='Name of the public or private channel to create'
    )


class ErrorModel1(Enum):
    method_not_supported_for_channel_type = 'method_not_supported_for_channel_type'
    missing_scope = 'missing_scope'
    name_taken = 'name_taken'
    restricted_action = 'restricted_action'
    no_channel = 'no_channel'
    invalid_name_required = 'invalid_name_required'
    invalid_name_punctuation = 'invalid_name_punctuation'
    invalid_name_maxlength = 'invalid_name_maxlength'
    invalid_name_specials = 'invalid_name_specials'
    invalid_name = 'invalid_name'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    user_is_bot = 'user_is_bot'
    user_is_restricted = 'user_is_restricted'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class CreatePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    detail: Optional[str] = None
    error: ErrorModel1
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class ErrorModel2(Enum):
    missing_scope = 'missing_scope'
    channel_not_found = 'channel_not_found'
    invalid_ts_latest = 'invalid_ts_latest'
    invalid_ts_oldest = 'invalid_ts_oldest'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class HistoryGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel2
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class ErrorModel3(Enum):
    missing_scope = 'missing_scope'
    channel_not_found = 'channel_not_found'
    team_added_to_org = 'team_added_to_org'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class InfoGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel3
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class InvitePostRequest(BaseModel):
    channel: Optional[str] = Field(
        None,
        description='The ID of the public or private channel to invite user(s) to.',
    )
    users: Optional[str] = Field(
        None,
        description='A comma separated list of user IDs. Up to 1000 users may be listed.',
    )


class ErrorModel4(Enum):
    method_not_supported_for_channel_type = 'method_not_supported_for_channel_type'
    missing_scope = 'missing_scope'
    channel_not_found = 'channel_not_found'
    user_not_found = 'user_not_found'
    no_user = 'no_user'
    cant_invite_self = 'cant_invite_self'
    not_in_channel = 'not_in_channel'
    already_in_channel = 'already_in_channel'
    is_archived = 'is_archived'
    cant_invite = 'cant_invite'
    too_many_users = 'too_many_users'
    ura_max_channels = 'ura_max_channels'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    user_is_bot = 'user_is_bot'
    user_is_restricted = 'user_is_restricted'
    user_is_ultra_restricted = 'user_is_ultra_restricted'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    team_added_to_org = 'team_added_to_org'
    missing_charset = 'missing_charset'
    superfluous_charset = 'superfluous_charset'


class ErrorModel5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    error: ErrorModel4
    ok: DefsOkFalse
    user: Optional[DefsUserId] = None


class InvitePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: Optional[ErrorModel4] = None
    errors: Optional[List[ErrorModel5]] = Field(
        None, min_length=1, title='errors is returned when an error associates an user'
    )
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class JoinPostRequest(BaseModel):
    channel: Optional[str] = Field(None, description='ID of conversation to join')


class ResponseMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    warnings: Optional[List[str]] = Field(None, min_length=1)


class ErrorModel6(Enum):
    method_not_supported_for_channel_type = 'method_not_supported_for_channel_type'
    missing_scope = 'missing_scope'
    channel_not_found = 'channel_not_found'
    is_archived = 'is_archived'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    user_is_bot = 'user_is_bot'
    user_is_restricted = 'user_is_restricted'
    user_is_ultra_restricted = 'user_is_ultra_restricted'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    team_added_to_org = 'team_added_to_org'
    missing_charset = 'missing_charset'
    superfluous_charset = 'superfluous_charset'


class JoinPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel6
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class KickPostRequest(BaseModel):
    channel: Optional[str] = Field(
        None, description='ID of conversation to remove user from.'
    )
    user: Optional[str] = Field(None, description='User ID to be removed.')


class KickPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class ErrorModel7(Enum):
    method_not_supported_for_channel_type = 'method_not_supported_for_channel_type'
    missing_scope = 'missing_scope'
    channel_not_found = 'channel_not_found'
    user_not_found = 'user_not_found'
    cant_kick_self = 'cant_kick_self'
    not_in_channel = 'not_in_channel'
    cant_kick_from_general = 'cant_kick_from_general'
    restricted_action = 'restricted_action'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    user_is_bot = 'user_is_bot'
    user_is_restricted = 'user_is_restricted'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class KickPostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel7
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class LeavePostRequest(BaseModel):
    channel: Optional[str] = Field(None, description='Conversation to leave')


class NotInChannel(Enum):
    boolean_True = True


class LeavePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    not_in_channel: Optional[NotInChannel] = None
    ok: DefsOkTrue


class ErrorModel8(Enum):
    method_not_supported_for_channel_type = 'method_not_supported_for_channel_type'
    last_member = 'last_member'
    missing_scope = 'missing_scope'
    channel_not_found = 'channel_not_found'
    is_archived = 'is_archived'
    cant_leave_general = 'cant_leave_general'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    user_is_bot = 'user_is_bot'
    user_is_restricted = 'user_is_restricted'
    user_is_ultra_restricted = 'user_is_ultra_restricted'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    team_added_to_org = 'team_added_to_org'
    missing_charset = 'missing_charset'
    superfluous_charset = 'superfluous_charset'


class LeavePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel8
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class ResponseMetadataModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next_cursor: str


class ErrorModel9(Enum):
    missing_scope = 'missing_scope'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class ListGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel9
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class MarkPostRequest(BaseModel):
    channel: Optional[str] = Field(
        None, description='Channel or conversation to set the read cursor for.'
    )
    ts: Optional[float] = Field(
        None,
        description='Unique identifier of message you want marked as most recently seen in this conversation.',
    )


class MarkPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class ErrorModel10(Enum):
    method_not_supported_for_channel_type = 'method_not_supported_for_channel_type'
    missing_scope = 'missing_scope'
    channel_not_found = 'channel_not_found'
    invalid_timestamp = 'invalid_timestamp'
    not_in_channel = 'not_in_channel'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    not_allowed_token_type = 'not_allowed_token_type'


class MarkPostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel10
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class MembersGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    members: List[DefsUserId] = Field(..., min_length=1)
    ok: DefsOkTrue
    response_metadata: ResponseMetadataModel


class ErrorModel11(Enum):
    channel_not_found = 'channel_not_found'
    invalid_limit = 'invalid_limit'
    invalid_cursor = 'invalid_cursor'
    fetch_members_failed = 'fetch_members_failed'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class MembersGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel11
    ok: DefsOkFalse


class OpenPostRequest(BaseModel):
    channel: Optional[str] = Field(
        None,
        description="Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead.",
    )
    return_im: Optional[bool] = Field(
        None,
        description='Boolean, indicates you want the full IM channel definition in the response.',
    )
    users: Optional[str] = Field(
        None,
        description='Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`.',
    )


class ErrorModel12(Enum):
    method_not_supported_for_channel_type = 'method_not_supported_for_channel_type'
    user_not_found = 'user_not_found'
    user_not_visible = 'user_not_visible'
    user_disabled = 'user_disabled'
    users_list_not_supplied = 'users_list_not_supplied'
    not_enough_users = 'not_enough_users'
    too_many_users = 'too_many_users'
    invalid_user_combination = 'invalid_user_combination'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    channel_not_found = 'channel_not_found'


class OpenPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel12
    ok: DefsOkFalse


class RenamePostRequest(BaseModel):
    channel: Optional[str] = Field(None, description='ID of conversation to rename')
    name: Optional[str] = Field(None, description='New name for conversation.')


class ErrorModel13(Enum):
    user_is_restricted = 'user_is_restricted'
    method_not_supported_for_channel_type = 'method_not_supported_for_channel_type'
    missing_scope = 'missing_scope'
    channel_not_found = 'channel_not_found'
    not_in_channel = 'not_in_channel'
    not_authorized = 'not_authorized'
    invalid_name = 'invalid_name'
    name_taken = 'name_taken'
    invalid_name_required = 'invalid_name_required'
    invalid_name_punctuation = 'invalid_name_punctuation'
    invalid_name_maxlength = 'invalid_name_maxlength'
    invalid_name_specials = 'invalid_name_specials'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class RenamePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel13
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class Messages(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    last_read: Optional[DefsTs] = None
    latest_reply: Optional[DefsTs] = None
    reply_count: int
    reply_users: Optional[List[DefsUserId]] = None
    reply_users_count: Optional[int] = None
    source_team: Optional[DefsTeam] = None
    subscribed: bool
    team: Optional[DefsTeam] = None
    text: str
    thread_ts: DefsTs
    ts: DefsTs
    type: str
    unread_count: Optional[int] = None
    user: DefsUserId
    user_profile: Optional[ObjsUserProfileShort] = None
    user_team: Optional[DefsTeam] = None


class MessagesModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    is_starred: Optional[bool] = None
    parent_user_id: DefsUserId
    source_team: Optional[DefsTeam] = None
    team: Optional[DefsTeam] = None
    text: str
    thread_ts: DefsTs
    ts: DefsTs
    type: str
    user: DefsUserId
    user_profile: Optional[ObjsUserProfileShort] = None
    user_team: Optional[DefsTeam] = None


class RepliesGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    has_more: Optional[bool] = None
    messages: List[List[Union[Messages, MessagesModel]]]
    ok: DefsOkTrue


class ErrorModel14(Enum):
    missing_scope = 'missing_scope'
    channel_not_found = 'channel_not_found'
    thread_not_found = 'thread_not_found'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class RepliesGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel14
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class SetPurposePostRequest(BaseModel):
    channel: Optional[str] = Field(
        None, description='Conversation to set the purpose of'
    )
    purpose: Optional[str] = Field(None, description='A new, specialer purpose')


class ErrorModel15(Enum):
    method_not_supported_for_channel_type = 'method_not_supported_for_channel_type'
    missing_scope = 'missing_scope'
    channel_not_found = 'channel_not_found'
    not_in_channel = 'not_in_channel'
    is_archived = 'is_archived'
    too_long = 'too_long'
    user_is_restricted = 'user_is_restricted'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class SetPurposePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel15
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class SetTopicPostRequest(BaseModel):
    channel: Optional[str] = Field(None, description='Conversation to set the topic of')
    topic: Optional[str] = Field(
        None,
        description='The new topic string. Does not support formatting or linkification.',
    )


class SetTopicPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel15
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class UnarchivePostRequest(BaseModel):
    channel: Optional[str] = Field(None, description='ID of conversation to unarchive')


class UnarchivePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class ErrorModel16(Enum):
    method_not_supported_for_channel_type = 'method_not_supported_for_channel_type'
    missing_scope = 'missing_scope'
    channel_not_found = 'channel_not_found'
    not_archived = 'not_archived'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    user_is_bot = 'user_is_bot'
    user_is_restricted = 'user_is_restricted'
    user_is_ultra_restricted = 'user_is_ultra_restricted'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    team_added_to_org = 'team_added_to_org'
    missing_charset = 'missing_charset'
    superfluous_charset = 'superfluous_charset'


class UnarchivePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel16
    needed: Optional[str] = None
    ok: DefsOkFalse
    provided: Optional[str] = None


class HistoryGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel_actions_count: int
    channel_actions_ts: List[Union[int, Any]]
    has_more: bool
    messages: List[ObjsMessage] = Field(..., min_length=1)
    ok: DefsOkTrue
    pin_count: int


class Channel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    created: Optional[str] = None
    id: DefsDmId
    is_im: Optional[bool] = None
    is_open: Optional[bool] = None
    last_read: Optional[DefsTs] = None
    latest: Optional[ObjsMessage] = None
    unread_count: Optional[float] = None
    unread_count_display: Optional[float] = None
    user: Optional[DefsUserId] = None


class CreatePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: ObjsConversation
    ok: DefsOkTrue


class InfoGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: ObjsConversation
    ok: DefsOkTrue


class InvitePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: ObjsConversation
    ok: DefsOkTrue


class JoinPostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: ObjsConversation
    ok: DefsOkTrue
    response_metadata: Optional[ResponseMetadata] = Field(
        None, title='Response metadata'
    )
    warning: Optional[str] = None


class ListGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channels: List[ObjsConversation]
    ok: DefsOkTrue
    response_metadata: Optional[ResponseMetadataModel] = None


class OpenPostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    already_open: Optional[bool] = None
    channel: List[Union[ObjsConversation, Channel]]
    no_op: Optional[bool] = None
    ok: DefsOkTrue


class RenamePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: ObjsConversation
    ok: DefsOkTrue


class SetPurposePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: ObjsConversation
    ok: DefsOkTrue


class SetTopicPostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: ObjsConversation
    ok: DefsOkTrue
