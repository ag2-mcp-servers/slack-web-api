# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:25:57+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel

from . import DefsChannel, DefsOkFalse, DefsOkTrue, DefsUserId, ObjsFile, ObjsMessage


class AddPostRequest(BaseModel):
    channel: str = Field(..., description='Channel to pin the item in.')
    timestamp: Optional[str] = Field(
        None, description='Timestamp of the message to pin.'
    )


class AddPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class Error(Enum):
    bad_timestamp = 'bad_timestamp'
    message_not_found = 'message_not_found'
    channel_not_found = 'channel_not_found'
    no_item_specified = 'no_item_specified'
    already_pinned = 'already_pinned'
    permission_denied = 'permission_denied'
    file_not_shared = 'file_not_shared'
    not_pinnable = 'not_pinnable'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    no_permission = 'no_permission'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class AddPostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: Error
    ok: DefsOkFalse


class Type(Enum):
    file = 'file'


class Type1Model(Enum):
    message = 'message'


class ListGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    count: int
    ok: DefsOkTrue


class ErrorModel(Enum):
    channel_not_found = 'channel_not_found'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    no_permission = 'no_permission'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class ListGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel
    ok: DefsOkFalse


class RemovePostRequest(BaseModel):
    channel: str = Field(..., description='Channel where the item is pinned to.')
    timestamp: Optional[str] = Field(
        None, description='Timestamp of the message to un-pin.'
    )


class RemovePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class ErrorModel1(Enum):
    bad_timestamp = 'bad_timestamp'
    file_not_found = 'file_not_found'
    file_comment_not_found = 'file_comment_not_found'
    message_not_found = 'message_not_found'
    no_item_specified = 'no_item_specified'
    not_pinned = 'not_pinned'
    permission_denied = 'permission_denied'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    no_permission = 'no_permission'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_typ = 'invalid_post_typ'
    missing_post_typ = 'missing_post_typ'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeou = 'request_timeou'
    upgrade_required = 'upgrade_required'


class RemovePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel1
    ok: DefsOkFalse


class Items(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    created: Optional[int] = None
    created_by: Optional[DefsUserId] = None
    file: Optional[ObjsFile] = None
    type: Optional[Type] = None


class ItemsModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: Optional[DefsChannel] = None
    created: Optional[int] = None
    created_by: Optional[DefsUserId] = None
    message: Optional[ObjsMessage] = None
    type: Optional[Type1Model] = None


class ListGetResponseModel1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: List[Union[Items, ItemsModel]]
    ok: DefsOkTrue


class ListGetResponseModel2(
    RootModel[List[Union[ListGetResponseModel1, ListGetResponse]]]
):
    model_config = ConfigDict(
        extra='forbid',
    )
    root: List[Union[ListGetResponseModel1, ListGetResponse]] = Field(
        ...,
        description='Schema for successful response from pins.list method',
        title='pins.list success schema',
    )
