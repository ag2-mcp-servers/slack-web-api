# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:25:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, EmailStr, Field, RootModel, constr


class Block(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    type: str


class Blocks(RootModel[List[Block]]):
    root: List[Block] = Field(
        ...,
        description="This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.",
        title='Block Kit blocks',
    )


class DefsAppId(RootModel[constr(pattern=r'^A[A-Z0-9]{1,}$')]):
    root: constr(pattern=r'^A[A-Z0-9]{1,}$') = Field(..., title='App ID')


class DefsBotId(RootModel[constr(pattern=r'^B[A-Z0-9]{8,}$')]):
    root: constr(pattern=r'^B[A-Z0-9]{8,}$') = Field(..., title='Bot User ID')


class DefsChannel(RootModel[constr(pattern=r'^[CGD][A-Z0-9]{8,}$')]):
    root: constr(pattern=r'^[CGD][A-Z0-9]{8,}$') = Field(
        ..., title='Channel-like conversation ID'
    )


class DefsChannelId(RootModel[constr(pattern=r'^[C][A-Z0-9]{2,}$')]):
    root: constr(pattern=r'^[C][A-Z0-9]{2,}$') = Field(..., title='Channel ID')


class DefsChannelName(RootModel[str]):
    root: str = Field(..., title='Name of a channel')


class DefsCommentId(RootModel[constr(pattern=r'^Fc[A-Z0-9]{8,}$')]):
    root: constr(pattern=r'^Fc[A-Z0-9]{8,}$') = Field(..., title='File Comment ID')


class DefsDmId(RootModel[constr(pattern=r'^[D][A-Z0-9]{8,}$')]):
    root: constr(pattern=r'^[D][A-Z0-9]{8,}$') = Field(
        ..., title='Direct Message Channel ID'
    )


class DefsEnterpriseId(RootModel[constr(pattern=r'^[E][A-Z0-9]{8,}$')]):
    root: constr(pattern=r'^[E][A-Z0-9]{8,}$') = Field(..., title='Enterprise ID')


class DefsEnterpriseName(RootModel[str]):
    root: str = Field(..., title='Name of the enterprise org')


class DefsEnterpriseUserId(RootModel[constr(pattern=r'^[WU][A-Z0-9]{8,}$')]):
    root: constr(pattern=r'^[WU][A-Z0-9]{8,}$') = Field(..., title='Enterprise User ID')


class DefsFileId(RootModel[constr(pattern=r'^[F][A-Z0-9]{8,}$')]):
    root: constr(pattern=r'^[F][A-Z0-9]{8,}$') = Field(..., title='File ID')


class DefsGroupId(RootModel[constr(pattern=r'^[G][A-Z0-9]{8,}$')]):
    root: constr(pattern=r'^[G][A-Z0-9]{8,}$') = Field(..., title='Private Channel ID')


class DefsOkFalse(Enum):
    boolean_False = False


class DefsOkTrue(Enum):
    boolean_True = True


class DefsOptionalAppId(RootModel[constr(pattern=r'^(A[A-Z0-9]{1,})?$')]):
    root: constr(pattern=r'^(A[A-Z0-9]{1,})?$') = Field(
        ..., title='App ID or empty string'
    )


class DefsPinnedInfo(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class DefsReminderId(RootModel[constr(pattern=r'^Rm[A-Z0-9]{8,}$')]):
    root: constr(pattern=r'^Rm[A-Z0-9]{8,}$') = Field(..., title='Reminder ID')


class DefsSubteamId(RootModel[constr(pattern=r'^S[A-Z0-9]{2,}$')]):
    root: constr(pattern=r'^S[A-Z0-9]{2,}$') = Field(..., title='Subteam ID')


class DefsTeam(RootModel[constr(pattern=r'^[T][A-Z0-9]{2,}$')]):
    root: constr(pattern=r'^[T][A-Z0-9]{2,}$') = Field(..., title='Team ID')


class DefsTopicPurposeCreator(RootModel[constr(pattern=r'^[UW][A-Z0-9]{8,}$|^$')]):
    root: constr(pattern=r'^[UW][A-Z0-9]{8,}$|^$') = Field(
        ..., title='User ID or empty string, used for topic and purpose creation'
    )


class DefsTs(RootModel[constr(pattern=r'^\d{10}\.\d{6}$')]):
    root: constr(pattern=r'^\d{10}\.\d{6}$') = Field(
        ..., title='Timestamp in format 0123456789.012345'
    )


class DefsUserId(RootModel[constr(pattern=r'^[UW][A-Z0-9]{2,}$')]):
    root: constr(pattern=r'^[UW][A-Z0-9]{2,}$') = Field(..., title='User ID')


class DefsWorkspaceId(RootModel[constr(pattern=r'^[TE][A-Z0-9]{8,}$')]):
    root: constr(pattern=r'^[TE][A-Z0-9]{8,}$') = Field(
        ..., title='Team or Enterprise ID'
    )


class Icons(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    image_36: AnyUrl
    image_48: AnyUrl
    image_72: AnyUrl


class ObjsBotProfile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    app_id: DefsAppId
    deleted: bool
    icons: Icons
    id: DefsBotId
    name: str
    team_id: DefsTeam
    updated: int


class Purpose(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    creator: DefsTopicPurposeCreator
    last_set: int
    value: str


class Topic(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    creator: DefsTopicPurposeCreator
    last_set: int
    value: str


class ObjsComments(RootModel[List]):
    root: List = Field(..., title='file comments object')


class DisplayCounts(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    display_counts: int
    guest_counts: int


class IsMpim(Enum):
    boolean_False = False


class IsMpim1(Enum):
    boolean_True = True


class ObjsEnterpriseUser(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enterprise_id: DefsEnterpriseId
    enterprise_name: DefsEnterpriseName
    id: DefsEnterpriseUserId
    is_admin: bool
    is_owner: bool
    teams: List[DefsTeam]


class CurrentItem(BaseModel):
    date_started: int
    team_id: str


class ObjsExternalOrgMigrations(BaseModel):
    current: List[CurrentItem]
    date_updated: int


class Shares(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    private: Optional[Any] = None
    public: Optional[Any] = None


class ObjsIcon(BaseModel):
    image_102: Optional[str] = None
    image_132: Optional[str] = None
    image_230: Optional[str] = None
    image_34: Optional[str] = None
    image_44: Optional[str] = None
    image_68: Optional[str] = None
    image_88: Optional[str] = None
    image_default: Optional[bool] = None


class Attachment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    fallback: Optional[str] = None
    id: int
    image_bytes: Optional[int] = None
    image_height: Optional[int] = None
    image_url: Optional[str] = None
    image_width: Optional[int] = None


class Icons1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    emoji: Optional[str] = None
    image_64: Optional[AnyUrl] = None


class ObjsPaging(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    count: Optional[int] = None
    page: int
    pages: Optional[int] = None
    per_page: Optional[int] = None
    spill: Optional[int] = None
    total: int


class ObjsPrimaryOwner(BaseModel):
    email: str
    id: str


class ObjsReaction(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    count: int
    name: str
    users: List[DefsUserId]


class ObjsReminder(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    complete_ts: Optional[int] = None
    creator: DefsUserId
    id: DefsReminderId
    recurring: bool
    text: str
    time: Optional[int] = None
    user: DefsUserId


class ObjsResources(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    excluded_ids: Optional[List[List[Union[DefsChannel, DefsTeam]]]] = None
    ids: List[List[Union[DefsChannel, DefsTeam]]]
    wildcard: Optional[bool] = None


class ObjsResponseMetadata1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    next_cursor: str


class Warning(Enum):
    method_deprecated = 'method_deprecated'


class ObjsResponseMetadata2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    messages: List[str]
    warnings: List[Warning]


class ObjsResponseMetadata3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    messages: List[str]
    next_cursor: str
    warnings: List[Warning]


class ObjsResponseMetadata(
    RootModel[
        List[Union[ObjsResponseMetadata1, ObjsResponseMetadata2, ObjsResponseMetadata3]]
    ]
):
    root: List[
        Union[ObjsResponseMetadata1, ObjsResponseMetadata2, ObjsResponseMetadata3]
    ]


class ObjsScopes(RootModel[List[str]]):
    root: List[str]


class AutoType(Enum):
    owner = 'owner'
    admin = 'admin'


class Prefs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channels: List[DefsChannelId]
    groups: List[DefsGroupId]


class ObjsSubteam(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    auto_provision: bool
    auto_type: List[Union[Any, AutoType]]
    channel_count: Optional[int] = None
    created_by: DefsUserId
    date_create: int
    date_delete: int
    date_update: int
    deleted_by: List[Union[Any, DefsUserId]]
    description: str
    enterprise_subteam_id: str
    handle: str
    id: DefsSubteamId
    is_external: bool
    is_subteam: bool
    is_usergroup: bool
    name: str
    prefs: Prefs
    team_id: DefsTeam
    updated_by: DefsUserId
    user_count: Optional[int] = None
    users: Optional[List[DefsUserId]] = None


class Plan(Enum):
    field_ = ''
    std = 'std'
    plus = 'plus'
    compliance = 'compliance'
    enterprise = 'enterprise'


class SsoProvider(BaseModel):
    label: Optional[str] = None
    name: Optional[str] = None
    type: Optional[str] = None


class ObjsTeam(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archived: Optional[bool] = None
    avatar_base_url: Optional[AnyUrl] = None
    created: Optional[int] = None
    date_create: Optional[int] = None
    deleted: Optional[bool] = None
    description: Optional[str] = None
    discoverable: Optional[List[Union[Any, str]]] = None
    domain: str
    email_domain: str
    enterprise_id: Optional[DefsEnterpriseId] = None
    enterprise_name: Optional[DefsEnterpriseName] = None
    external_org_migrations: Optional[ObjsExternalOrgMigrations] = None
    has_compliance_export: Optional[bool] = None
    icon: ObjsIcon
    id: DefsWorkspaceId
    is_assigned: Optional[bool] = None
    is_enterprise: Optional[int] = None
    is_over_storage_limit: Optional[bool] = None
    limit_ts: Optional[int] = None
    locale: Optional[str] = None
    messages_count: Optional[int] = None
    msg_edit_window_mins: Optional[int] = None
    name: str
    over_integrations_limit: Optional[bool] = None
    over_storage_limit: Optional[bool] = None
    pay_prod_cur: Optional[str] = None
    plan: Optional[Plan] = None
    primary_owner: Optional[ObjsPrimaryOwner] = None
    sso_provider: Optional[SsoProvider] = None


class Type(Enum):
    text = 'text'
    date = 'date'
    link = 'link'
    mailto = 'mailto'
    options_list = 'options_list'
    user = 'user'


class ObjsTeamProfileFieldOption(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    is_custom: Optional[bool] = None
    is_multiple_entry: Optional[bool] = None
    is_protected: Optional[bool] = None
    is_scim: Optional[bool] = None


class ObjsUserProfile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    always_active: Optional[bool] = None
    api_app_id: Optional[DefsOptionalAppId] = None
    avatar_hash: str
    bot_id: Optional[DefsBotId] = None
    display_name: str
    display_name_normalized: str
    email: Optional[EmailStr] = None
    fields: List[Dict[str, Any]]
    first_name: Optional[str] = None
    guest_expiration_ts: Optional[int] = None
    guest_invited_by: Optional[str] = None
    image_1024: Optional[AnyUrl] = None
    image_192: Optional[AnyUrl] = None
    image_24: Optional[AnyUrl] = None
    image_32: Optional[AnyUrl] = None
    image_48: Optional[AnyUrl] = None
    image_512: Optional[AnyUrl] = None
    image_72: Optional[AnyUrl] = None
    image_original: Optional[AnyUrl] = None
    is_app_user: Optional[bool] = None
    is_custom_image: Optional[bool] = None
    is_restricted: Optional[bool] = None
    is_ultra_restricted: Optional[bool] = None
    last_avatar_image_hash: Optional[str] = None
    last_name: Optional[str] = None
    memberships_count: Optional[int] = None
    name: Optional[str] = None
    phone: str
    pronouns: Optional[str] = None
    real_name: str
    real_name_normalized: str
    skype: str
    status_default_emoji: Optional[str] = None
    status_default_text: Optional[str] = None
    status_default_text_canonical: Optional[str] = None
    status_emoji: str
    status_expiration: Optional[int] = None
    status_text: str
    status_text_canonical: Optional[str] = None
    team: Optional[DefsWorkspaceId] = None
    title: str
    updated: Optional[int] = None
    user_id: Optional[str] = None
    username: Optional[str] = None


class ObjsUserProfileShort(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avatar_hash: str
    display_name: str
    display_name_normalized: Optional[str] = None
    first_name: str
    image_72: AnyUrl
    is_restricted: bool
    is_ultra_restricted: bool
    name: str
    real_name: str
    real_name_normalized: Optional[str] = None
    team: DefsWorkspaceId


class ObjsComment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    comment: str
    created: int
    id: DefsCommentId
    is_intro: bool
    is_starred: Optional[bool] = None
    num_stars: Optional[int] = None
    pinned_info: Optional[DefsPinnedInfo] = None
    pinned_to: Optional[List[DefsChannel]] = None
    reactions: Optional[List[ObjsReaction]] = None
    timestamp: int
    user: DefsUserId


class Share(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accepted_user: Optional[DefsUserId] = None
    is_active: bool
    team: ObjsTeam
    user: DefsUserId


class Share2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    date_create: int
    id: DefsTeam
    is_active: bool
    name: str
    team: ObjsTeam


class ObjsFile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channels: Optional[List[DefsChannelId]] = None
    comments_count: Optional[int] = None
    created: Optional[int] = None
    date_delete: Optional[int] = None
    display_as_bot: Optional[bool] = None
    editable: Optional[bool] = None
    editor: Optional[DefsUserId] = None
    external_id: Optional[str] = None
    external_type: Optional[str] = None
    external_url: Optional[AnyUrl] = None
    filetype: Optional[str] = None
    groups: Optional[List[DefsGroupId]] = None
    has_rich_preview: Optional[bool] = None
    id: Optional[DefsFileId] = None
    image_exif_rotation: Optional[int] = None
    ims: Optional[List[DefsDmId]] = None
    is_external: Optional[bool] = None
    is_public: Optional[bool] = None
    is_starred: Optional[bool] = None
    is_tombstoned: Optional[bool] = None
    last_editor: Optional[DefsUserId] = None
    mimetype: Optional[str] = None
    mode: Optional[str] = None
    name: Optional[str] = None
    non_owner_editable: Optional[bool] = None
    num_stars: Optional[int] = None
    original_h: Optional[int] = None
    original_w: Optional[int] = None
    permalink: Optional[AnyUrl] = None
    permalink_public: Optional[AnyUrl] = None
    pinned_info: Optional[DefsPinnedInfo] = None
    pinned_to: Optional[List[DefsChannel]] = None
    pretty_type: Optional[str] = None
    preview: Optional[str] = None
    public_url_shared: Optional[bool] = None
    reactions: Optional[List[ObjsReaction]] = None
    shares: Optional[Shares] = None
    size: Optional[int] = None
    source_team: Optional[DefsTeam] = None
    state: Optional[str] = None
    thumb_1024: Optional[AnyUrl] = None
    thumb_1024_h: Optional[int] = None
    thumb_1024_w: Optional[int] = None
    thumb_160: Optional[AnyUrl] = None
    thumb_360: Optional[AnyUrl] = None
    thumb_360_h: Optional[int] = None
    thumb_360_w: Optional[int] = None
    thumb_480: Optional[AnyUrl] = None
    thumb_480_h: Optional[int] = None
    thumb_480_w: Optional[int] = None
    thumb_64: Optional[AnyUrl] = None
    thumb_720: Optional[AnyUrl] = None
    thumb_720_h: Optional[int] = None
    thumb_720_w: Optional[int] = None
    thumb_80: Optional[AnyUrl] = None
    thumb_800: Optional[AnyUrl] = None
    thumb_800_h: Optional[int] = None
    thumb_800_w: Optional[int] = None
    thumb_960: Optional[AnyUrl] = None
    thumb_960_h: Optional[int] = None
    thumb_960_w: Optional[int] = None
    thumb_tiny: Optional[str] = None
    timestamp: Optional[int] = None
    title: Optional[str] = None
    updated: Optional[int] = None
    url_private: Optional[AnyUrl] = None
    url_private_download: Optional[AnyUrl] = None
    user: Optional[str] = None
    user_team: Optional[DefsTeam] = None
    username: Optional[str] = None


class ObjsMessage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    attachments: Optional[List[Attachment]] = Field(None, min_length=1)
    blocks: Optional[Blocks] = None
    bot_id: Optional[List[Union[DefsBotId, Any]]] = None
    bot_profile: Optional[ObjsBotProfile] = None
    client_msg_id: Optional[str] = None
    comment: Optional[ObjsComment] = None
    display_as_bot: Optional[bool] = None
    file: Optional[ObjsFile] = None
    files: Optional[List[ObjsFile]] = Field(None, min_length=1)
    icons: Optional[Icons1] = None
    inviter: Optional[DefsUserId] = None
    is_delayed_message: Optional[bool] = None
    is_intro: Optional[bool] = None
    is_starred: Optional[bool] = None
    last_read: Optional[DefsTs] = None
    latest_reply: Optional[DefsTs] = None
    name: Optional[str] = None
    old_name: Optional[str] = None
    parent_user_id: Optional[DefsUserId] = None
    permalink: Optional[AnyUrl] = None
    pinned_to: Optional[List[DefsChannel]] = None
    purpose: Optional[str] = None
    reactions: Optional[List[ObjsReaction]] = None
    reply_count: Optional[int] = None
    reply_users: Optional[List[DefsUserId]] = Field(None, min_length=1)
    reply_users_count: Optional[int] = None
    source_team: Optional[DefsWorkspaceId] = None
    subscribed: Optional[bool] = None
    subtype: Optional[str] = None
    team: Optional[DefsWorkspaceId] = None
    text: str
    thread_ts: Optional[DefsTs] = None
    topic: Optional[str] = None
    ts: DefsTs
    type: str
    unread_count: Optional[int] = None
    upload: Optional[bool] = None
    user: Optional[DefsUserId] = None
    user_profile: Optional[ObjsUserProfileShort] = None
    user_team: Optional[DefsWorkspaceId] = None
    username: Optional[str] = None


class ObjsTeamProfileField(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_name: Optional[str] = None
    hint: str
    id: constr(pattern=r'^X[a-zA-Z0-9]{9,}$')
    is_hidden: Optional[bool] = None
    label: str
    options: Optional[List[Union[Any, ObjsTeamProfileFieldOption]]] = None
    ordering: float
    possible_values: Optional[List[str]] = None
    type: Type


class TeamProfile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    fields: List[ObjsTeamProfileField] = Field(..., min_length=1)


class ObjsUser1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[constr(pattern=r'^[a-fA-F0-9]{6}$')] = None
    deleted: Optional[bool] = None
    enterprise_user: Optional[ObjsEnterpriseUser] = None
    has_2fa: Optional[bool] = None
    id: DefsUserId
    is_admin: Optional[bool] = None
    is_app_user: bool
    is_bot: bool
    is_external: Optional[bool] = None
    is_forgotten: Optional[bool] = None
    is_invited_user: Optional[bool] = None
    is_owner: Optional[bool] = None
    is_primary_owner: Optional[bool] = None
    is_restricted: Optional[bool] = None
    is_stranger: Optional[bool] = None
    is_ultra_restricted: Optional[bool] = None
    locale: Optional[str] = None
    name: str
    presence: Optional[str] = None
    profile: ObjsUserProfile
    real_name: Optional[str] = None
    team: Optional[DefsWorkspaceId] = None
    team_id: Optional[DefsWorkspaceId] = None
    team_profile: Optional[TeamProfile] = None
    two_factor_type: Optional[str] = None
    tz: Optional[List[Union[Any, str]]] = None
    tz_label: Optional[str] = None
    tz_offset: Optional[float] = None
    updated: float


class ObjsUser2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[constr(pattern=r'^([a-fA-F0-9]{6})?$')] = Field(
        None,
        description='refercing to bug: https://jira.tinyspeck.com/browse/EVALUE-1559',
    )
    deleted: Optional[bool] = None
    enterprise_user: Optional[ObjsEnterpriseUser] = None
    has_2fa: Optional[bool] = None
    id: DefsUserId
    is_admin: Optional[bool] = None
    is_app_user: bool
    is_bot: bool
    is_external: Optional[bool] = None
    is_forgotten: Optional[bool] = None
    is_owner: Optional[bool] = None
    is_primary_owner: Optional[bool] = None
    is_restricted: Optional[bool] = None
    is_stranger: Optional[bool] = None
    is_ultra_restricted: Optional[bool] = None
    locale: Optional[str] = None
    name: str
    presence: Optional[str] = None
    profile: ObjsUserProfile
    real_name: Optional[str] = None
    team_id: Optional[DefsWorkspaceId] = None
    team_profile: Optional[TeamProfile] = None
    teams: Optional[List[DefsWorkspaceId]] = Field(None, min_length=1)
    two_factor_type: Optional[str] = None
    tz: Optional[List[Union[Any, str]]] = None
    tz_label: Optional[str] = None
    tz_offset: Optional[float] = None
    updated: float


class ObjsUser(RootModel[List[Union[ObjsUser1, ObjsUser2]]]):
    root: List[Union[ObjsUser1, ObjsUser2]]


class ObjsChannel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accepted_user: Optional[DefsUserId] = None
    created: int
    creator: DefsUserId
    id: DefsChannelId
    is_archived: Optional[bool] = None
    is_channel: bool
    is_frozen: Optional[bool] = None
    is_general: Optional[bool] = None
    is_member: Optional[bool] = None
    is_moved: Optional[int] = None
    is_mpim: bool
    is_non_threadable: Optional[bool] = None
    is_org_shared: bool
    is_pending_ext_shared: Optional[bool] = None
    is_private: bool
    is_read_only: Optional[bool] = None
    is_shared: bool
    is_thread_only: Optional[bool] = None
    last_read: Optional[DefsTs] = None
    latest: Optional[List[Union[ObjsMessage, Any]]] = None
    members: List[DefsUserId] = Field(..., min_length=0)
    name: str
    name_normalized: str
    num_members: Optional[int] = None
    pending_shared: Optional[List[DefsTeam]] = Field(None, min_length=0)
    previous_names: Optional[List[DefsChannelName]] = Field(None, min_length=0)
    priority: Optional[float] = None
    purpose: Purpose
    topic: Topic
    unlinked: Optional[int] = Field(
        None,
        title='Field to determine whether a channel has ever been shared/disconnected in the past',
    )
    unread_count: Optional[int] = None
    unread_count_display: Optional[int] = None


class ObjsConversation1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accepted_user: Optional[DefsUserId] = None
    connected_team_ids: Optional[List[DefsWorkspaceId]] = Field(None, min_length=0)
    conversation_host_id: Optional[DefsWorkspaceId] = None
    created: int
    creator: DefsUserId
    display_counts: Optional[DisplayCounts] = None
    enterprise_id: Optional[DefsEnterpriseId] = None
    has_pins: Optional[bool] = None
    id: DefsChannel
    internal_team_ids: Optional[List[DefsTeam]] = Field(None, min_length=0)
    is_archived: bool
    is_channel: bool
    is_ext_shared: Optional[bool] = None
    is_frozen: Optional[bool] = None
    is_general: bool
    is_global_shared: Optional[bool] = None
    is_group: bool
    is_im: bool
    is_member: Optional[bool] = None
    is_moved: Optional[int] = None
    is_mpim: IsMpim
    is_non_threadable: Optional[bool] = None
    is_open: Optional[bool] = None
    is_org_default: Optional[bool] = None
    is_org_mandatory: Optional[bool] = None
    is_org_shared: bool
    is_pending_ext_shared: Optional[bool] = None
    is_private: bool
    is_read_only: Optional[bool] = None
    is_shared: bool
    is_starred: Optional[bool] = None
    is_thread_only: Optional[bool] = None
    last_read: Optional[DefsTs] = None
    latest: Optional[List[Union[ObjsMessage, Any]]] = None
    members: Optional[List[DefsUserId]] = Field(None, min_length=0)
    name: str
    name_normalized: str
    num_members: Optional[int] = None
    parent_conversation: Optional[List[Union[DefsChannel, Any]]] = None
    pending_connected_team_ids: Optional[List[DefsTeam]] = Field(None, min_length=0)
    pending_shared: Optional[List[DefsTeam]] = Field(None, min_length=0)
    pin_count: Optional[int] = None
    previous_names: Optional[List[DefsChannelName]] = Field(None, min_length=0)
    priority: Optional[float] = None
    purpose: Purpose
    shared_team_ids: Optional[List[DefsTeam]] = Field(None, min_length=0)
    shares: Optional[List[Share]] = Field(None, min_length=0)
    timezone_count: Optional[int] = None
    topic: Topic
    unlinked: Optional[int] = Field(
        None,
        title='Field to determine whether a channel has ever been shared/disconnected in the past',
    )
    unread_count: Optional[int] = None
    unread_count_display: Optional[int] = None
    use_case: Optional[str] = None
    user: Optional[DefsUserId] = None
    version: Optional[int] = None


class ObjsConversation2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accepted_user: Optional[DefsUserId] = None
    connected_team_ids: Optional[List[DefsTeam]] = Field(None, min_length=0)
    conversation_host_id: Optional[DefsWorkspaceId] = None
    created: int
    creator: DefsUserId
    display_counts: Optional[DisplayCounts] = None
    id: DefsChannel
    internal_team_ids: Optional[List[DefsTeam]] = Field(None, min_length=0)
    is_archived: bool
    is_channel: bool
    is_ext_shared: Optional[bool] = None
    is_frozen: Optional[bool] = None
    is_general: bool
    is_group: bool
    is_im: bool
    is_member: Optional[bool] = None
    is_moved: Optional[int] = None
    is_mpim: IsMpim1
    is_non_threadable: Optional[bool] = None
    is_open: Optional[bool] = None
    is_org_shared: bool
    is_pending_ext_shared: Optional[bool] = None
    is_private: bool
    is_read_only: Optional[bool] = None
    is_shared: bool
    is_starred: Optional[bool] = None
    is_thread_only: Optional[bool] = None
    last_read: Optional[DefsTs] = None
    latest: Optional[List[Union[ObjsMessage, Any]]] = None
    members: Optional[List[DefsUserId]] = Field(None, min_length=0)
    name: str
    name_normalized: str
    num_members: Optional[int] = None
    parent_conversation: Optional[List[Union[DefsChannel, Any]]] = None
    pending_connected_team_ids: Optional[List[DefsTeam]] = Field(None, min_length=0)
    pending_shared: Optional[List[DefsTeam]] = Field(None, min_length=0)
    pin_count: Optional[int] = None
    previous_names: Optional[List[DefsChannelName]] = Field(None, min_length=0)
    priority: Optional[float] = None
    purpose: Purpose
    shared_team_ids: Optional[List[DefsTeam]] = Field(None, min_length=0)
    shares: Optional[List[Share]] = Field(None, min_length=0)
    timezone_count: Optional[int] = None
    topic: Topic
    unlinked: Optional[int] = Field(
        None,
        title='Field to determine whether a channel has ever been shared/disconnected in the past',
    )
    unread_count: Optional[int] = None
    unread_count_display: Optional[int] = None
    user: Optional[DefsUserId] = None
    version: Optional[int] = None


class ObjsConversation3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    created: int
    has_pins: Optional[bool] = None
    id: DefsDmId
    is_archived: Optional[bool] = None
    is_ext_shared: Optional[bool] = None
    is_frozen: Optional[bool] = None
    is_im: bool
    is_open: Optional[bool] = None
    is_org_shared: bool
    is_shared: Optional[bool] = None
    is_starred: Optional[bool] = None
    is_user_deleted: Optional[bool] = None
    last_read: Optional[DefsTs] = None
    latest: Optional[List[Union[ObjsMessage, Any]]] = None
    parent_conversation: Optional[List[Union[DefsChannel, Any]]] = None
    pin_count: Optional[int] = None
    priority: float
    shares: Optional[List[Share2]] = Field(None, min_length=0)
    unread_count: Optional[int] = None
    unread_count_display: Optional[int] = None
    user: DefsUserId
    version: Optional[int] = None


class ObjsConversation(
    RootModel[List[Union[ObjsConversation1, ObjsConversation2, ObjsConversation3]]]
):
    root: List[Union[ObjsConversation1, ObjsConversation2, ObjsConversation3]]
