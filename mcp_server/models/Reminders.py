# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:25:57+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field

from . import DefsOkFalse, DefsOkTrue, ObjsReminder


class AddPostRequest(BaseModel):
    text: str = Field(..., description='The content of the reminder')
    time: str = Field(
        ...,
        description='When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. "in 15 minutes," or "every Thursday")',
    )
    user: Optional[str] = Field(
        None,
        description='The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.',
    )


class AddPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue
    reminder: ObjsReminder


class Error(Enum):
    cannot_parse = 'cannot_parse'
    user_not_found = 'user_not_found'
    cannot_add_bot = 'cannot_add_bot'
    cannot_add_slackbot = 'cannot_add_slackbot'
    cannot_add_others = 'cannot_add_others'
    cannot_add_others_recurring = 'cannot_add_others_recurring'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    user_is_bot = 'user_is_bot'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class AddPostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: Error
    ok: DefsOkFalse


class CompletePostRequest(BaseModel):
    reminder: Optional[str] = Field(
        None, description='The ID of the reminder to be marked as complete'
    )


class CompletePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class ErrorModel(Enum):
    not_found = 'not_found'
    cannot_complete_recurring = 'cannot_complete_recurring'
    cannot_complete_others = 'cannot_complete_others'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    user_is_bot = 'user_is_bot'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class CompletePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel
    ok: DefsOkFalse


class DeletePostRequest(BaseModel):
    reminder: Optional[str] = Field(None, description='The ID of the reminder')


class DeletePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class ErrorModel1(Enum):
    not_found = 'not_found'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    user_is_bot = 'user_is_bot'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class DeletePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel1
    ok: DefsOkFalse


class InfoGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue
    reminder: ObjsReminder


class InfoGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel1
    ok: DefsOkFalse


class ListGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue
    reminders: List[ObjsReminder]


class ErrorModel2(Enum):
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    user_is_bot = 'user_is_bot'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class ListGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel2
    ok: DefsOkFalse
