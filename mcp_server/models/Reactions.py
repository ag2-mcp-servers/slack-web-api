# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:25:57+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel

from . import (
    DefsChannel,
    DefsOkFalse,
    DefsOkTrue,
    ObjsComment,
    ObjsFile,
    ObjsMessage,
    ObjsPaging,
    ObjsResponseMetadata,
)


class AddPostRequest(BaseModel):
    channel: str = Field(
        ..., description='Channel where the message to add reaction to was posted.'
    )
    name: str = Field(..., description='Reaction (emoji) name.')
    timestamp: str = Field(
        ..., description='Timestamp of the message to add reaction to.'
    )


class AddPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class Error(Enum):
    bad_timestamp = 'bad_timestamp'
    message_not_found = 'message_not_found'
    no_item_specified = 'no_item_specified'
    invalid_name = 'invalid_name'
    already_reacted = 'already_reacted'
    too_many_emoji = 'too_many_emoji'
    too_many_reactions = 'too_many_reactions'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    no_permission = 'no_permission'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class AddPostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: Error
    ok: DefsOkFalse


class Type(Enum):
    message = 'message'


class Type1Model(Enum):
    file = 'file'


class Type1Model1(Enum):
    file_comment = 'file_comment'


class GetGetResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class ErrorModel(Enum):
    bad_timestamp = 'bad_timestamp'
    file_not_found = 'file_not_found'
    file_comment_not_found = 'file_comment_not_found'
    message_not_found = 'message_not_found'
    no_item_specified = 'no_item_specified'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    no_permission = 'no_permission'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'


class GetGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel
    ok: DefsOkFalse


class Type1Model2(Enum):
    message = 'message'


class Type1Model3(Enum):
    file = 'file'


class Type1Model4(Enum):
    file_comment = 'file_comment'


class ErrorModel1(Enum):
    user_not_found = 'user_not_found'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactiv = 'account_inactiv'
    no_permission = 'no_permission'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class ListGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel1
    ok: DefsOkFalse


class RemovePostRequest(BaseModel):
    channel: Optional[str] = Field(
        None,
        description='Channel where the message to remove reaction from was posted.',
    )
    file: Optional[str] = Field(None, description='File to remove reaction from.')
    file_comment: Optional[str] = Field(
        None, description='File comment to remove reaction from.'
    )
    name: str = Field(..., description='Reaction (emoji) name.')
    timestamp: Optional[str] = Field(
        None, description='Timestamp of the message to remove reaction from.'
    )


class RemovePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class ErrorModel2(Enum):
    bad_timestamp = 'bad_timestamp'
    file_not_found = 'file_not_found'
    file_comment_not_found = 'file_comment_not_found'
    message_not_found = 'message_not_found'
    no_item_specified = 'no_item_specified'
    invalid_name = 'invalid_name'
    no_reaction = 'no_reaction'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    no_permission = 'no_permission'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class RemovePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel2
    ok: DefsOkFalse


class GetGetResponseModel1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: DefsChannel
    message: ObjsMessage
    ok: DefsOkTrue
    type: Type


class GetGetResponseModel2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file: ObjsFile
    ok: DefsOkTrue
    type: Type1Model


class GetGetResponseModel3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    comment: ObjsComment
    file: ObjsFile
    ok: DefsOkTrue
    type: Type1Model1


class GetGetResponseModel4(
    RootModel[
        Union[
            List[
                Union[GetGetResponseModel1, GetGetResponseModel2, GetGetResponseModel3]
            ],
            GetGetResponse,
        ]
    ]
):
    model_config = ConfigDict(
        extra='forbid',
    )
    root: Union[
        List[Union[GetGetResponseModel1, GetGetResponseModel2, GetGetResponseModel3]],
        GetGetResponse,
    ] = Field(
        ...,
        description='Schema for successful response from reactions.get method',
        title='reactions.get success schema',
    )


class Items(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: DefsChannel
    message: ObjsMessage
    type: Type1Model2


class ItemsModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file: ObjsFile
    type: Type1Model3


class ItemsModel1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    comment: ObjsComment
    file: ObjsFile
    type: Type1Model4


class ListGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: List[List[Union[Items, ItemsModel, ItemsModel1]]]
    ok: DefsOkTrue
    paging: Optional[ObjsPaging] = None
    response_metadata: Optional[ObjsResponseMetadata] = None
