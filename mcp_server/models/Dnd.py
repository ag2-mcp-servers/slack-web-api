# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:25:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, ConfigDict, Field

from . import DefsOkFalse, DefsOkTrue


class EndDndPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class Error(Enum):
    unknown_error = 'unknown_error'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    user_is_bot = 'user_is_bot'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class EndDndPostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: Error
    ok: DefsOkFalse


class EndSnoozePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dnd_enabled: bool
    next_dnd_end_ts: int
    next_dnd_start_ts: int
    ok: DefsOkTrue
    snooze_enabled: bool


class ErrorModel(Enum):
    snooze_not_active = 'snooze_not_active'
    snooze_end_failed = 'snooze_end_failed'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    user_is_bot = 'user_is_bot'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class EndSnoozePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel
    ok: DefsOkFalse


class InfoGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dnd_enabled: bool
    next_dnd_end_ts: int
    next_dnd_start_ts: int
    ok: DefsOkTrue
    snooze_enabled: Optional[bool] = None
    snooze_endtime: Optional[int] = None
    snooze_remaining: Optional[int] = None


class ErrorModel1(Enum):
    user_not_found = 'user_not_found'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class InfoGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel1
    ok: DefsOkFalse


class SetSnoozePostRequest(BaseModel):
    num_minutes: str = Field(
        ..., description='Number of minutes, from now, to snooze until.'
    )
    token: str = Field(
        ..., description='Authentication token. Requires scope: `dnd:write`'
    )


class SetSnoozePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue
    snooze_enabled: bool
    snooze_endtime: int
    snooze_remaining: int


class ErrorModel2(Enum):
    missing_duration = 'missing_duration'
    snooze_failed = 'snooze_failed'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    user_is_bot = 'user_is_bot'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    too_long = 'too_long'
    fatal_error = 'fatal_error'


class SetSnoozePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel2
    ok: DefsOkFalse


class TeamInfoGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ok: DefsOkTrue


class TeamInfoGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ok: DefsOkFalse
