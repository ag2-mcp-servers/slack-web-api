# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:25:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, ConfigDict, EmailStr, Field

from .. import DefsOkFalse, DefsOkTrue, ObjsUserProfile


class GetGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue
    profile: ObjsUserProfile


class Error(Enum):
    user_not_found = 'user_not_found'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    user_is_bot = 'user_is_bot'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class GetGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: Error
    ok: DefsOkFalse


class SetPostRequest(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of a single key to set. Usable only if `profile` is not passed.',
    )
    profile: Optional[str] = Field(
        None,
        description='Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.',
    )
    user: Optional[str] = Field(
        None,
        description='ID of user to change. This argument may only be specified by team admins on paid teams.',
    )
    value: Optional[str] = Field(
        None,
        description='Value to set a single key to. Usable only if `profile` is not passed.',
    )


class SetPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email_pending: Optional[EmailStr] = None
    ok: DefsOkTrue
    profile: ObjsUserProfile
    username: str


class ErrorModel(Enum):
    reserved_name = 'reserved_name'
    invalid_profile = 'invalid_profile'
    profile_set_failed = 'profile_set_failed'
    not_admin = 'not_admin'
    not_app_admin = 'not_app_admin'
    cannot_update_admin_user = 'cannot_update_admin_user'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    user_is_bot = 'user_is_bot'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class SetPostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel
    ok: DefsOkFalse
