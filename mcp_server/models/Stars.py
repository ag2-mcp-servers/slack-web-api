# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:25:57+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field

from . import (
    DefsChannel,
    DefsDmId,
    DefsGroupId,
    DefsOkFalse,
    DefsOkTrue,
    ObjsComment,
    ObjsFile,
    ObjsMessage,
    ObjsPaging,
)


class AddPostRequest(BaseModel):
    channel: Optional[str] = Field(
        None,
        description='Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`).',
    )
    file: Optional[str] = Field(None, description='File to add star to.')
    file_comment: Optional[str] = Field(
        None, description='File comment to add star to.'
    )
    timestamp: Optional[str] = Field(
        None, description='Timestamp of the message to add star to.'
    )


class AddPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class Error(Enum):
    bad_timestamp = 'bad_timestamp'
    message_not_found = 'message_not_found'
    file_not_found = 'file_not_found'
    file_comment_not_found = 'file_comment_not_found'
    channel_not_found = 'channel_not_found'
    no_item_specified = 'no_item_specified'
    already_starred = 'already_starred'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class AddPostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: Error
    ok: DefsOkFalse


class Type(Enum):
    message = 'message'


class Type1Model(Enum):
    file = 'file'


class Type1Model1(Enum):
    file_comment = 'file_comment'


class Type1Model2(Enum):
    channel = 'channel'


class Items(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: DefsChannel
    date_create: int
    type: Type1Model2


class Type1Model3(Enum):
    im = 'im'


class ItemsModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: DefsDmId
    date_create: int
    type: Type1Model3


class Type1Model4(Enum):
    group = 'group'


class ItemsModel1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: DefsGroupId
    date_create: int
    type: Type1Model4


class ErrorModel(Enum):
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    user_is_bot = 'user_is_bot'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class ListGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel
    ok: DefsOkFalse


class RemovePostRequest(BaseModel):
    channel: Optional[str] = Field(
        None,
        description='Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`).',
    )
    file: Optional[str] = Field(None, description='File to remove star from.')
    file_comment: Optional[str] = Field(
        None, description='File comment to remove star from.'
    )
    timestamp: Optional[str] = Field(
        None, description='Timestamp of the message to remove star from.'
    )


class RemovePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ok: DefsOkTrue


class ErrorModel1(Enum):
    bad_timestamp = 'bad_timestamp'
    message_not_found = 'message_not_found'
    file_not_found = 'file_not_found'
    file_comment_not_found = 'file_comment_not_found'
    channel_not_found = 'channel_not_found'
    no_item_specified = 'no_item_specified'
    not_starred = 'not_starred'
    not_authed = 'not_authed'
    invalid_auth = 'invalid_auth'
    account_inactive = 'account_inactive'
    token_revoked = 'token_revoked'
    no_permission = 'no_permission'
    org_login_required = 'org_login_required'
    invalid_arg_name = 'invalid_arg_name'
    invalid_array_arg = 'invalid_array_arg'
    invalid_charset = 'invalid_charset'
    invalid_form_data = 'invalid_form_data'
    invalid_post_type = 'invalid_post_type'
    missing_post_type = 'missing_post_type'
    team_added_to_org = 'team_added_to_org'
    invalid_json = 'invalid_json'
    json_not_object = 'json_not_object'
    request_timeout = 'request_timeout'
    upgrade_required = 'upgrade_required'
    fatal_error = 'fatal_error'


class RemovePostResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callstack: Optional[str] = Field(
        None, description='Note: PHP callstack is only visible in dev/qa'
    )
    error: ErrorModel1
    ok: DefsOkFalse


class ItemsModel2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: DefsChannel
    date_create: int
    message: ObjsMessage
    type: Type


class ItemsModel3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    date_create: int
    file: ObjsFile
    type: Type1Model


class ItemsModel4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    comment: ObjsComment
    date_create: int
    file: ObjsFile
    type: Type1Model1


class ListGetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: List[
        List[
            Union[ItemsModel2, ItemsModel3, ItemsModel4, Items, ItemsModel, ItemsModel1]
        ]
    ]
    ok: DefsOkTrue
    paging: Optional[ObjsPaging] = None
