# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:25:57+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from starlette.requests import Request

from models.Admin.apps import (
    ApprovePostResponse,
    ApprovePostResponseModel,
    RestrictPostResponse,
    RestrictPostResponseModel,
)
from models.Admin.apps.approved import ListGetResponse, ListGetResponseModel
from models.Admin.apps.requests import ListGetResponse, ListGetResponseModel
from models.Admin.apps.restricted import ListGetResponse, ListGetResponseModel
from models.Admin.conversations import (
    ArchivePostResponse,
    ArchivePostResponseModel,
    ConvertToPrivatePostResponse,
    ConvertToPrivatePostResponseModel,
    CreatePostResponse,
    CreatePostResponseModel,
    DeletePostResponse,
    DeletePostResponseModel,
    DisconnectSharedPostResponse,
    DisconnectSharedPostResponseModel,
    GetConversationPrefsGetResponse,
    GetConversationPrefsGetResponseModel,
    GetTeamsGetResponse,
    GetTeamsGetResponseModel,
    InvitePostResponse,
    InvitePostResponseModel,
    RenamePostResponse,
    RenamePostResponseModel,
    SearchGetResponse,
    SearchGetResponseModel,
    SetConversationPrefsPostResponse,
    SetConversationPrefsPostResponseModel,
    SetTeamsPostResponse,
    SetTeamsPostResponseModel,
    UnarchivePostResponse,
    UnarchivePostResponseModel,
)
from models.Admin.conversations.ekm import (
    ListOriginalConnectedChannelInfoGetResponse,
    ListOriginalConnectedChannelInfoGetResponseModel,
)
from models.Admin.conversations.restrictAccess import (
    AddGroupPostResponse,
    AddGroupPostResponseModel,
    ListGroupsGetResponse,
    ListGroupsGetResponseModel,
    RemoveGroupPostResponse,
    RemoveGroupPostResponseModel,
)
from models.Admin.emoji import (
    AddAliasPostResponse,
    AddAliasPostResponseModel,
    AddPostResponse,
    AddPostResponseModel,
    ListGetResponse,
    ListGetResponseModel,
    RemovePostResponse,
    RemovePostResponseModel,
    RenamePostResponse,
    RenamePostResponseModel,
)
from models.Admin.inviteRequests import (
    ApprovePostResponse,
    ApprovePostResponseModel,
    DenyPostResponse,
    DenyPostResponseModel,
    ListGetResponse,
    ListGetResponseModel,
)
from models.Admin.inviteRequests.approved import ListGetResponse, ListGetResponseModel
from models.Admin.inviteRequests.denied import ListGetResponse, ListGetResponseModel
from models.Admin.teams import (
    CreatePostResponse,
    CreatePostResponseModel,
    ListGetResponse,
    ListGetResponseModel,
)
from models.Admin.teams.admins import ListGetResponse, ListGetResponseModel
from models.Admin.teams.owners import ListGetResponse, ListGetResponseModel
from models.Admin.teams.settings import (
    InfoGetResponse,
    InfoGetResponseModel,
    SetDefaultChannelsPostResponse,
    SetDefaultChannelsPostResponseModel,
    SetDescriptionPostResponse,
    SetDescriptionPostResponseModel,
    SetDiscoverabilityPostResponse,
    SetDiscoverabilityPostResponseModel,
    SetIconPostResponse,
    SetIconPostResponseModel,
    SetNamePostResponse,
    SetNamePostResponseModel,
)
from models.Admin.usergroups import (
    AddChannelsPostResponse,
    AddChannelsPostResponseModel,
    AddTeamsPostResponse,
    AddTeamsPostResponseModel,
    ListChannelsGetResponse,
    ListChannelsGetResponseModel,
    RemoveChannelsPostResponse,
    RemoveChannelsPostResponseModel,
)
from models.Admin.users import (
    AssignPostResponse,
    AssignPostResponseModel,
    InvitePostResponse,
    InvitePostResponseModel,
    ListGetResponse,
    ListGetResponseModel,
    RemovePostResponse,
    RemovePostResponseModel,
    SetAdminPostResponse,
    SetAdminPostResponseModel,
    SetExpirationPostResponse,
    SetExpirationPostResponseModel,
    SetOwnerPostResponse,
    SetOwnerPostResponseModel,
    SetRegularPostResponse,
    SetRegularPostResponseModel,
)
from models.Admin.users.session import (
    InvalidatePostResponse,
    InvalidatePostResponseModel,
    ResetPostResponse,
    ResetPostResponseModel,
)
from models.Api import TestGetResponse, TestGetResponseModel
from models.Apps import UninstallGetResponse, UninstallGetResponseModel
from models.Apps.event.authorizations import ListGetResponse, ListGetResponseModel
from models.Apps.permissions import (
    InfoGetResponse,
    InfoGetResponseModel,
    RequestGetResponse,
    RequestGetResponseModel,
)
from models.Apps.permissions.resources import ListGetResponse, ListGetResponseModel
from models.Apps.permissions.scopes import ListGetResponse, ListGetResponseModel
from models.Apps.permissions.users import (
    ListGetResponse,
    ListGetResponseModel,
    RequestGetResponse,
    RequestGetResponseModel,
)
from models.Auth import (
    RevokeGetResponse,
    RevokeGetResponseModel,
    TestGetResponse,
    TestGetResponseModel,
)
from models.Bots import InfoGetResponse, InfoGetResponseModel
from models.Calls import (
    AddPostResponse,
    AddPostResponseModel,
    EndPostResponse,
    EndPostResponseModel,
    InfoGetResponse,
    InfoGetResponseModel,
    UpdatePostResponse,
    UpdatePostResponseModel,
)
from models.Calls.participants import (
    AddPostResponse,
    AddPostResponseModel,
    RemovePostResponse,
    RemovePostResponseModel,
)
from models.Chat import (
    DeletePostResponse,
    DeletePostResponseModel,
    DeleteScheduledMessagePostResponse,
    DeleteScheduledMessagePostResponseModel,
    GetPermalinkGetResponse,
    GetPermalinkGetResponseModel,
    MeMessagePostResponse,
    MeMessagePostResponseModel,
    PostEphemeralPostResponse,
    PostEphemeralPostResponseModel,
    PostMessagePostResponse,
    PostMessagePostResponseModel,
    ScheduleMessagePostResponse,
    ScheduleMessagePostResponseModel,
    UnfurlPostResponse,
    UnfurlPostResponseModel,
    UpdatePostResponse,
    UpdatePostResponseModel,
)
from models.Chat.scheduledMessages import ListGetResponse, ListGetResponseModel
from models.Conversations import (
    ArchivePostResponse,
    ArchivePostResponseModel,
    ClosePostResponse,
    ClosePostResponseModel,
    CreatePostResponse,
    CreatePostResponseModel,
    HistoryGetResponse,
    HistoryGetResponseModel,
    InfoGetResponse,
    InfoGetResponseModel,
    InvitePostResponse,
    InvitePostResponseModel,
    JoinPostResponse,
    JoinPostResponseModel,
    KickPostResponse,
    KickPostResponseModel,
    LeavePostResponse,
    LeavePostResponseModel,
    ListGetResponse,
    ListGetResponseModel,
    MarkPostResponse,
    MarkPostResponseModel,
    MembersGetResponse,
    MembersGetResponseModel,
    OpenPostResponse,
    OpenPostResponseModel,
    RenamePostResponse,
    RenamePostResponseModel,
    RepliesGetResponse,
    RepliesGetResponseModel,
    SetPurposePostResponse,
    SetPurposePostResponseModel,
    SetTopicPostResponse,
    SetTopicPostResponseModel,
    UnarchivePostResponse,
    UnarchivePostResponseModel,
)
from models.Dialog import OpenGetResponse, OpenGetResponseModel
from models.Dnd import (
    EndDndPostResponse,
    EndDndPostResponseModel,
    EndSnoozePostResponse,
    EndSnoozePostResponseModel,
    InfoGetResponse,
    InfoGetResponseModel,
    SetSnoozePostResponse,
    SetSnoozePostResponseModel,
    TeamInfoGetResponse,
    TeamInfoGetResponseModel,
)
from models.Emoji import ListGetResponse, ListGetResponseModel
from models.Files import (
    DeletePostResponse,
    DeletePostResponseModel,
    InfoGetResponse,
    InfoGetResponseModel,
    ListGetResponse,
    ListGetResponseModel,
    RevokePublicURLPostResponse,
    RevokePublicURLPostResponseModel,
    SharedPublicURLPostResponse,
    SharedPublicURLPostResponseModel,
    UploadPostResponse,
    UploadPostResponseModel,
)
from models.Files.comments import DeletePostResponse, DeletePostResponseModel
from models.Files.remote import (
    AddPostResponse,
    AddPostResponseModel,
    InfoGetResponse,
    InfoGetResponseModel,
    ListGetResponse,
    ListGetResponseModel,
    RemovePostResponse,
    RemovePostResponseModel,
    ShareGetResponse,
    ShareGetResponseModel,
    UpdatePostResponse,
    UpdatePostResponseModel,
)
from models.Migration import ExchangeGetResponse, ExchangeGetResponseModel
from models.Oauth import (
    AccessGetResponse,
    AccessGetResponseModel,
    TokenGetResponse,
    TokenGetResponseModel,
)
from models.Oauth.v2 import AccessGetResponse, AccessGetResponseModel
from models.Pins import (
    AddPostResponse,
    AddPostResponseModel,
    ListGetResponseModel,
    ListGetResponseModel2,
    RemovePostResponse,
    RemovePostResponseModel,
)
from models.Reactions import (
    AddPostResponse,
    AddPostResponseModel,
    GetGetResponseModel,
    GetGetResponseModel4,
    ListGetResponse,
    ListGetResponseModel,
    RemovePostResponse,
    RemovePostResponseModel,
)
from models.Reminders import (
    AddPostResponse,
    AddPostResponseModel,
    CompletePostResponse,
    CompletePostResponseModel,
    DeletePostResponse,
    DeletePostResponseModel,
    InfoGetResponse,
    InfoGetResponseModel,
    ListGetResponse,
    ListGetResponseModel,
)
from models.Rtm import ConnectGetResponse, ConnectGetResponseModel
from models.Search import MessagesGetResponse, MessagesGetResponseModel
from models.Stars import (
    AddPostResponse,
    AddPostResponseModel,
    ListGetResponse,
    ListGetResponseModel,
    RemovePostResponse,
    RemovePostResponseModel,
)
from models.Team import (
    AccessLogsGetResponse,
    AccessLogsGetResponseModel,
    BillableInfoGetResponse,
    BillableInfoGetResponseModel,
    InfoGetResponse,
    InfoGetResponseModel,
    IntegrationLogsGetResponse,
    IntegrationLogsGetResponseModel,
)
from models.Team.profile import GetGetResponse, GetGetResponseModel
from models.Usergroups import (
    CreatePostResponse,
    CreatePostResponseModel,
    DisablePostResponse,
    DisablePostResponseModel,
    EnablePostResponse,
    EnablePostResponseModel,
    ListGetResponse,
    ListGetResponseModel,
    UpdatePostResponse,
    UpdatePostResponseModel,
)
from models.Usergroups.users import (
    ListGetResponse,
    ListGetResponseModel,
    UpdatePostResponse,
    UpdatePostResponseModel,
)
from models.Users import (
    ConversationsGetResponse,
    ConversationsGetResponseModel,
    DeletePhotoPostResponse,
    DeletePhotoPostResponseModel,
    GetPresenceGetResponse,
    GetPresenceGetResponseModel,
    IdentityGetResponseModel,
    IdentityGetResponseModel1,
    InfoGetResponse,
    InfoGetResponseModel,
    ListGetResponse,
    ListGetResponseModel,
    LookupByEmailGetResponse,
    LookupByEmailGetResponseModel,
    SetActivePostResponse,
    SetActivePostResponseModel,
    SetPhotoPostResponse,
    SetPhotoPostResponseModel,
    SetPresencePostResponse,
    SetPresencePostResponseModel,
)
from models.Users.profile import (
    GetGetResponse,
    GetGetResponseModel,
    SetPostResponse,
    SetPostResponseModel,
)
from models.Views import (
    OpenGetResponse,
    OpenGetResponseModel,
    PublishGetResponse,
    PublishGetResponseModel,
    PushGetResponse,
    PushGetResponseModel,
    UpdateGetResponse,
    UpdateGetResponseModel,
)
from models.Workflows import (
    StepCompletedGetResponse,
    StepCompletedGetResponseModel,
    StepFailedGetResponse,
    StepFailedGetResponseModel,
    UpdateStepGetResponse,
    UpdateStepGetResponseModel,
)

app = MCPProxy(
    contact={
        'name': 'Slack developer relations',
        'url': 'https://api.slack.com/support',
    },
    description='One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.',
    title='Slack Web API',
    version='1.7.0',
    servers=[{'url': 'https://slack.com/api'}],
)


@app.post(
    '/admin.apps.approve',
    description=""" Approve an app for installation on a workspace. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_apps_approve(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.apps.approved.list',
    description=""" List approved apps for an org or workspace. """,
    tags=[
        'admin_user_management',
        'authentication_management',
        'apps_permissions_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_apps_approved_list(
    token: str,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
    team_id: Optional[str] = None,
    enterprise_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.apps.requests.list',
    description=""" List app requests for a team/workspace. """,
    tags=[
        'authentication_management',
        'apps_permission_management',
        'admin_user_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_apps_requests_list(
    token: str,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
    team_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.apps.restrict',
    description=""" Restrict an app for installation on a workspace. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_apps_restrict(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.apps.restricted.list',
    description=""" List restricted apps for an org or workspace. """,
    tags=['admin_user_management', 'admin_team_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_apps_restricted_list(
    token: str,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
    team_id: Optional[str] = None,
    enterprise_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.conversations.archive',
    description=""" Archive a public or private channel. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_archive(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.conversations.convertToPrivate',
    description=""" Convert a public channel to a private channel. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_convert_to_private(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.conversations.create',
    description=""" Create a public or private channel-based conversation. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_create(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.conversations.delete',
    description=""" Delete a public or private channel. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_delete(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.conversations.disconnectShared',
    description=""" Disconnect a connected channel from one or more workspaces. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_disconnect_shared(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.conversations.ekm.listOriginalConnectedChannelInfo',
    description=""" List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM. """,
    tags=['admin_user_management', 'team_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_ekm_list_original_connected_channel_info(
    token: str,
    channel_ids: Optional[str] = None,
    team_ids: Optional[str] = None,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.conversations.getConversationPrefs',
    description=""" Get conversation preferences for a public or private channel. """,
    tags=['admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_get_conversation_prefs(token: str, channel_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.conversations.getTeams',
    description=""" Get all the workspaces a given public or private channel is connected to within this Enterprise org. """,
    tags=[
        'admin_conversation_management',
        'conversation_management',
        'conversations_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_get_teams(
    token: str,
    channel_id: str = ...,
    cursor: Optional[str] = None,
    limit: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.conversations.invite',
    description=""" Invite a user to a public or private channel. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_invite(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.conversations.rename',
    description=""" Rename a public or private channel. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_rename(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.conversations.restrictAccess.addGroup',
    description=""" Add an allowlist of IDP groups for accessing a channel """,
    tags=[
        'admin_app_management',
        'admin_user_management',
        'apps_permissions_management',
        'authentication_management',
        'user_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_restrict_access_add_group(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.conversations.restrictAccess.listGroups',
    description=""" List all IDP Groups linked to a channel """,
    tags=['admin_user_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_restrict_access_list_groups(
    token: str, channel_id: str = ..., team_id: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.conversations.restrictAccess.removeGroup',
    description=""" Remove a linked IDP group linked from a private channel """,
    tags=['api_testing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_restrict_access_remove_group(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.conversations.search',
    description=""" Search for public or private channels in an Enterprise organization. """,
    tags=['message_search', 'chat_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_search(
    token: str,
    team_ids: Optional[str] = None,
    query: Optional[str] = None,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
    search_channel_types: Optional[str] = None,
    sort: Optional[str] = None,
    sort_dir: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.conversations.setConversationPrefs',
    description=""" Set the posting permissions for a public or private channel. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_set_conversation_prefs(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.conversations.setTeams',
    description=""" Set the workspaces in an Enterprise grid org that connect to a public or private channel. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_set_teams(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.conversations.unarchive',
    description=""" Unarchive a public or private channel. """,
    tags=['admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_conversations_unarchive(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.emoji.add',
    description=""" Add an emoji. """,
    tags=[
        'admin_app_management',
        'admin_user_management',
        'apps_permission_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_emoji_add(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.emoji.addAlias',
    description=""" Add an emoji alias. """,
    tags=['admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_emoji_add_alias(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.emoji.list',
    description=""" List emoji for an Enterprise Grid organization. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_emoji_list(
    token: str, cursor: Optional[str] = None, limit: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.emoji.remove',
    description=""" Remove an emoji across an Enterprise Grid organization """,
    tags=['admin_app_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_emoji_remove(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.emoji.rename',
    description=""" Rename an emoji. """,
    tags=['admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_emoji_rename(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.inviteRequests.approve',
    description=""" Approve a workspace invite request. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_invite_requests_approve(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.inviteRequests.approved.list',
    description=""" List all approved workspace invite requests. """,
    tags=['admin_team_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_invite_requests_approved_list(
    token: str,
    team_id: Optional[str] = None,
    cursor: Optional[str] = None,
    limit: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.inviteRequests.denied.list',
    description=""" List all denied workspace invite requests. """,
    tags=['admin_team_management', 'admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_invite_requests_denied_list(
    token: str,
    team_id: Optional[str] = None,
    cursor: Optional[str] = None,
    limit: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.inviteRequests.deny',
    description=""" Deny a workspace invite request. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_invite_requests_deny(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.inviteRequests.list',
    description=""" List all pending workspace invite requests. """,
    tags=['authentication_management', 'admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_invite_requests_list(
    token: str,
    team_id: Optional[str] = None,
    cursor: Optional[str] = None,
    limit: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.teams.admins.list',
    description=""" List all of the admins on a given workspace. """,
    tags=['admin_team_management', 'user_management', 'team_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_teams_admins_list(
    token: str,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
    team_id: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.teams.create',
    description=""" Create an Enterprise team. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_teams_create(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.teams.list',
    description=""" List all teams on an Enterprise organization """,
    tags=['authentication_management', 'apps_permissions_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_teams_list(
    token: str, limit: Optional[int] = None, cursor: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.teams.owners.list',
    description=""" List all of the owners on a given workspace. """,
    tags=['admin_team_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_teams_owners_list(
    token: str,
    team_id: str = ...,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.teams.settings.info',
    description=""" Fetch information about settings in a workspace """,
    tags=['admin_team_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_teams_settings_info(token: str, team_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.teams.settings.setDefaultChannels',
    description=""" Set the default channels of a workspace. """,
    tags=[
        'admin_app_management',
        'admin_user_management',
        'apps_permissions_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_teams_settings_set_default_channels(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.teams.settings.setDescription',
    description=""" Set the description of a given workspace. """,
    tags=['admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_teams_settings_set_description(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.teams.settings.setDiscoverability',
    description=""" An API method that allows admins to set the discoverability of a given workspace """,
    tags=['admin_user_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_teams_settings_set_discoverability(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.teams.settings.setIcon',
    description=""" Sets the icon of a workspace. """,
    tags=['admin_app_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_teams_settings_set_icon(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.teams.settings.setName',
    description=""" Set the name of a given workspace. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_teams_settings_set_name(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.usergroups.addChannels',
    description=""" Add one or more default channels to an IDP group. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_usergroups_add_channels(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.usergroups.addTeams',
    description=""" Associate one or more default workspaces with an organization-wide IDP group. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_usergroups_add_teams(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.usergroups.listChannels',
    description=""" List the channels linked to an org-level IDP group (user group). """,
    tags=[
        'admin_usergroup_management',
        'usergroup_management',
        'usergroups_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_usergroups_list_channels(
    token: str,
    usergroup_id: str = ...,
    team_id: Optional[str] = None,
    include_num_members: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.usergroups.removeChannels',
    description=""" Remove one or more default channels from an org-level IDP group (user group). """,
    tags=['admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_usergroups_remove_channels(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.users.assign',
    description=""" Add an Enterprise user to a workspace. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_users_assign(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.users.invite',
    description=""" Invite a user to a workspace. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_users_invite(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin.users.list',
    description=""" List users on a workspace """,
    tags=['admin_team_management', 'admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_users_list(
    token: str,
    team_id: str = ...,
    cursor: Optional[str] = None,
    limit: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.users.remove',
    description=""" Remove a user from a workspace. """,
    tags=['authentication_management', 'apps_permissions_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_users_remove(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.users.session.invalidate',
    description=""" Invalidate a single session for a user by session_id """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_users_session_invalidate(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.users.session.reset',
    description=""" Wipes all valid sessions on all devices for a given user """,
    tags=['authentication_management', 'apps_permissions_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_users_session_reset(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.users.setAdmin',
    description=""" Set an existing guest, regular user, or owner to be an admin user. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_users_set_admin(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.users.setExpiration',
    description=""" Set an expiration for a guest user """,
    tags=['admin_user_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_users_set_expiration(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.users.setOwner',
    description=""" Set an existing guest, regular user, or admin user to be a workspace owner. """,
    tags=['authentication_management', 'api_testing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_users_set_owner(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin.users.setRegular',
    description=""" Set an existing guest user, admin user, or owner to be a regular user. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def admin_users_set_regular(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api.test',
    description=""" Checks API calling code. """,
    tags=['api_testing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_test(error: Optional[str] = None, foo: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps.event.authorizations.list',
    description=""" Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def apps_event_authorizations_list(
    token: str,
    event_context: str = ...,
    cursor: Optional[str] = None,
    limit: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps.permissions.info',
    description=""" Returns list of permissions this app has on a team. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def apps_permissions_info(token: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps.permissions.request',
    description=""" Allows an app to request additional scopes """,
    tags=['oauth_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def apps_permissions_request(token: str, scopes: str = ..., trigger_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps.permissions.resources.list',
    description=""" Returns list of resource grants this app has on a team. """,
    tags=['apps_permissions_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def apps_permissions_resources_list(
    token: str, cursor: Optional[str] = None, limit: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps.permissions.scopes.list',
    description=""" Returns list of scopes this app has on a team. """,
    tags=['authentication_management', 'oauth_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def apps_permissions_scopes_list(token: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps.permissions.users.list',
    description=""" Returns list of user grants and corresponding scopes this app has on a team. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def apps_permissions_users_list(
    token: str, cursor: Optional[str] = None, limit: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps.permissions.users.request',
    description=""" Enables an app to trigger a permissions modal to grant an app access to a user access scope. """,
    tags=['authentication_management', 'apps_permission_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def apps_permissions_users_request(
    token: str, scopes: str = ..., trigger_id: str = ..., user: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps.uninstall',
    description=""" Uninstalls your app from a workspace. """,
    tags=['oauth_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def apps_uninstall(
    token: Optional[str] = None,
    client_id: Optional[str] = None,
    client_secret: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/auth.revoke',
    description=""" Revokes a token. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def auth_revoke(token: str, test: Optional[bool] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/auth.test',
    description=""" Checks authentication & identity. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def auth_test(token: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/bots.info',
    description=""" Gets information about a bot user. """,
    tags=['bots_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def bots_info(token: str, bot: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/calls.add',
    description=""" Registers a new Call. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def calls_add(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/calls.end',
    description=""" Ends a Call. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def calls_end(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/calls.info',
    description=""" Returns information about a Call. """,
    tags=['admin_user_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def calls_info(token: str, id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/calls.participants.add',
    description=""" Registers new participants added to a Call. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def calls_participants_add(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/calls.participants.remove',
    description=""" Registers participants removed from a Call. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def calls_participants_remove(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/calls.update',
    description=""" Updates information about a Call. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def calls_update(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chat.delete',
    description=""" Deletes a message. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def chat_delete(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chat.deleteScheduledMessage',
    description=""" Deletes a pending scheduled message from the queue. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def chat_delete_scheduled_message(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chat.getPermalink',
    description=""" Retrieve a permalink URL for a specific extant message """,
    tags=['chat_operations', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def chat_get_permalink(token: str, channel: str = ..., message_ts: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chat.meMessage',
    description=""" Share a me message into a channel. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def chat_me_message(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chat.postEphemeral',
    description=""" Sends an ephemeral message to a user in a channel. """,
    tags=['admin_user_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def chat_post_ephemeral(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chat.postMessage',
    description=""" Sends a message to a channel. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def chat_post_message(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chat.scheduleMessage',
    description=""" Schedules a message to be sent to a channel. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def chat_schedule_message(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chat.scheduledMessages.list',
    description=""" Returns a list of scheduled messages. """,
    tags=[
        'admin_conversation_management',
        'conversations_management',
        'conversation_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def chat_scheduled_messages_list(
    token: Optional[str] = None,
    channel: Optional[str] = None,
    latest: Optional[float] = None,
    oldest: Optional[float] = None,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chat.unfurl',
    description=""" Provide custom unfurl behavior for user-posted URLs """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def chat_unfurl(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chat.update',
    description=""" Updates a message. """,
    tags=['authentication_management', 'admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def chat_update(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.archive',
    description=""" Archives a conversation. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_archive(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.close',
    description=""" Closes a direct message or multi-person direct message. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_close(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.create',
    description=""" Initiates a public or private channel-based conversation """,
    tags=['oauth_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_create(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations.history',
    description=""" Fetches a conversation's history of messages and events. """,
    tags=['conversation_management', 'conversations_management', 'chat_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_history(
    token: Optional[str] = None,
    channel: Optional[str] = None,
    latest: Optional[float] = None,
    oldest: Optional[float] = None,
    inclusive: Optional[bool] = None,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations.info',
    description=""" Retrieve information about a conversation. """,
    tags=[
        'admin_user_management',
        'apps_permissions_management',
        'authentication_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_info(
    token: Optional[str] = None,
    channel: Optional[str] = None,
    include_locale: Optional[bool] = None,
    include_num_members: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.invite',
    description=""" Invites users to a channel. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_invite(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.join',
    description=""" Joins an existing conversation. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_join(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.kick',
    description=""" Removes a user from a conversation. """,
    tags=['authentication_management', 'apps_permissions_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_kick(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.leave',
    description=""" Leaves a conversation. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_leave(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations.list',
    description=""" Lists all channels in a Slack team. """,
    tags=[
        'apps_permissions_management',
        'apps_permission_management',
        'authentication_management',
        'user_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_list(
    token: Optional[str] = None,
    exclude_archived: Optional[bool] = None,
    types: Optional[str] = None,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.mark',
    description=""" Sets the read cursor in a channel. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_mark(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations.members',
    description=""" Retrieve members of a conversation. """,
    tags=['admin_user_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_members(
    token: Optional[str] = None,
    channel: Optional[str] = None,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.open',
    description=""" Opens or resumes a direct message or multi-person direct message. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_open(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.rename',
    description=""" Renames a conversation. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_rename(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversations.replies',
    description=""" Retrieve a thread of messages posted to a conversation """,
    tags=[
        'message_search',
        'chat_operations',
        'conversation_management',
        'conversations_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_replies(
    token: Optional[str] = None,
    channel: Optional[str] = None,
    ts: Optional[float] = None,
    latest: Optional[float] = None,
    oldest: Optional[float] = None,
    inclusive: Optional[bool] = None,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.setPurpose',
    description=""" Sets the purpose for a conversation. """,
    tags=['authentication_management', 'apps_permissions_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_set_purpose(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.setTopic',
    description=""" Sets the topic for a conversation. """,
    tags=['authentication_management', 'api_testing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_set_topic(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversations.unarchive',
    description=""" Reverses conversation archival. """,
    tags=['authentication_management', 'admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def conversations_unarchive(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dialog.open',
    description=""" Open a dialog with a user """,
    tags=[
        'admin_conversation_management',
        'conversation_management',
        'conversations_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def dialog_open(token: str, dialog: str = ..., trigger_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dnd.endDnd',
    description=""" Ends the current user's Do Not Disturb session immediately. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def dnd_end_dnd(token: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dnd.endSnooze',
    description=""" Ends the current user's snooze mode immediately. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def dnd_end_snooze(token: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dnd.info',
    description=""" Retrieves a user's current Do Not Disturb status. """,
    tags=['authentication_management', 'admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def dnd_info(token: Optional[str] = None, user: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dnd.setSnooze',
    description=""" Turns on Do Not Disturb mode for the current user, or changes its duration. """,
    tags=['admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def dnd_set_snooze(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dnd.teamInfo',
    description=""" Retrieves the Do Not Disturb status for up to 50 users on a team. """,
    tags=['admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def dnd_team_info(token: Optional[str] = None, users: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/emoji.list',
    description=""" Lists custom emoji for a team. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def emoji_list(token: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/files.comments.delete',
    description=""" Deletes an existing comment on a file. """,
    tags=['authentication_management', 'apps_permission_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_comments_delete(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/files.delete',
    description=""" Deletes a file. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_delete(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/files.info',
    description=""" Gets information about a file. """,
    tags=['admin_user_management', 'authentication_management', 'file_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_info(
    token: Optional[str] = None,
    file: Optional[str] = None,
    count: Optional[str] = None,
    page: Optional[str] = None,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/files.list',
    description=""" List for a team, in a channel, or from a user with applied filters. """,
    tags=['conversations_management', 'message_search'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_list(
    token: Optional[str] = None,
    user: Optional[str] = None,
    channel: Optional[str] = None,
    ts_from: Optional[float] = None,
    ts_to: Optional[float] = None,
    types: Optional[str] = None,
    count: Optional[str] = None,
    page: Optional[str] = None,
    show_files_hidden_by_limit: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/files.remote.add',
    description=""" Adds a file from a remote service """,
    tags=['api_testing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_remote_add(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/files.remote.info',
    description=""" Retrieve information about a remote file added to Slack """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_remote_info(
    token: Optional[str] = None,
    file: Optional[str] = None,
    external_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/files.remote.list',
    description=""" Retrieve information about a remote file added to Slack """,
    tags=['message_search', 'chat_operations', 'conversation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_remote_list(
    token: Optional[str] = None,
    channel: Optional[str] = None,
    ts_from: Optional[float] = None,
    ts_to: Optional[float] = None,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/files.remote.remove',
    description=""" Remove a remote file. """,
    tags=['api_testing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_remote_remove(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/files.remote.share',
    description=""" Share a remote file into a channel. """,
    tags=[
        'authentication_management',
        'apps_permission_management',
        'apps_permissions_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_remote_share(
    token: Optional[str] = None,
    file: Optional[str] = None,
    external_id: Optional[str] = None,
    channels: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/files.remote.update',
    description=""" Updates an existing remote file. """,
    tags=['None'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_remote_update(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/files.revokePublicURL',
    description=""" Revokes public/external sharing access for a file """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_revoke_public_u_r_l(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/files.sharedPublicURL',
    description=""" Enables a file for public/external sharing. """,
    tags=[
        'admin_user_management',
        'authentication_management',
        'apps_permissions_management',
        'oauth_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_shared_public_u_r_l(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/files.upload',
    description=""" Uploads or creates a file. """,
    tags=['admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def files_upload(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/migration.exchange',
    description=""" For Enterprise Grid workspaces, map local user IDs to global user IDs """,
    tags=['admin_user_management', 'admin_team_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def migration_exchange(
    token: str,
    users: str = ...,
    team_id: Optional[str] = None,
    to_old: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/oauth.access',
    description=""" Exchanges a temporary OAuth verifier code for an access token. """,
    tags=['oauth_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def oauth_access(
    client_id: Optional[str] = None,
    client_secret: Optional[str] = None,
    code: Optional[str] = None,
    redirect_uri: Optional[str] = None,
    single_channel: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/oauth.token',
    description=""" Exchanges a temporary OAuth verifier code for a workspace token. """,
    tags=['oauth_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def oauth_token(
    client_id: Optional[str] = None,
    client_secret: Optional[str] = None,
    code: Optional[str] = None,
    redirect_uri: Optional[str] = None,
    single_channel: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/oauth.v2.access',
    description=""" Exchanges a temporary OAuth verifier code for an access token. """,
    tags=['oauth_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def oauth_v2_access(
    client_id: Optional[str] = None,
    client_secret: Optional[str] = None,
    code: str = ...,
    redirect_uri: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/pins.add',
    description=""" Pins an item to a channel. """,
    tags=['admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def pins_add(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pins.list',
    description=""" Lists items pinned to a channel. """,
    tags=['authentication_management', 'apps_permissions_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def pins_list(token: str, channel: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/pins.remove',
    description=""" Un-pins an item from a channel. """,
    tags=['admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def pins_remove(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reactions.add',
    description=""" Adds a reaction to an item. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reactions_add(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reactions.get',
    description=""" Gets reactions for an item. """,
    tags=['file_operations', 'file_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reactions_get(
    token: str,
    channel: Optional[str] = None,
    file: Optional[str] = None,
    file_comment: Optional[str] = None,
    full: Optional[bool] = None,
    timestamp: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reactions.list',
    description=""" Lists reactions made by a user. """,
    tags=['authentication_management', 'apps_permission_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reactions_list(
    token: str,
    user: Optional[str] = None,
    full: Optional[bool] = None,
    count: Optional[int] = None,
    page: Optional[int] = None,
    cursor: Optional[str] = None,
    limit: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reactions.remove',
    description=""" Removes a reaction from an item. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reactions_remove(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reminders.add',
    description=""" Creates a reminder. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reminders_add(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reminders.complete',
    description=""" Marks a reminder as complete. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reminders_complete(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reminders.delete',
    description=""" Deletes a reminder. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reminders_delete(token: Optional[str] = None, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reminders.info',
    description=""" Gets information about a reminder. """,
    tags=['reminder_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reminders_info(token: Optional[str] = None, reminder: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reminders.list',
    description=""" Lists all reminders created by or for a given user. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reminders_list(token: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rtm.connect',
    description=""" Starts a Real Time Messaging session. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def rtm_connect(
    token: str,
    batch_presence_aware: Optional[bool] = None,
    presence_sub: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search.messages',
    description=""" Searches for messages matching a query. """,
    tags=['message_search', 'chat_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_messages(
    token: str,
    count: Optional[int] = None,
    highlight: Optional[bool] = None,
    page: Optional[int] = None,
    query: str = ...,
    sort: Optional[str] = None,
    sort_dir: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/stars.add',
    description=""" Adds a star to an item. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def stars_add(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/stars.list',
    description=""" Lists stars for a user. """,
    tags=[
        'admin_conversation_management',
        'conversation_management',
        'conversations_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def stars_list(
    token: Optional[str] = None,
    count: Optional[str] = None,
    page: Optional[str] = None,
    cursor: Optional[str] = None,
    limit: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/stars.remove',
    description=""" Removes a star from an item. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def stars_remove(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/team.accessLogs',
    description=""" Gets the access logs for the current team. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def team_access_logs(
    token: str,
    before: Optional[str] = None,
    count: Optional[str] = None,
    page: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/team.billableInfo',
    description=""" Gets billable users information for the current team. """,
    tags=['authentication_management', 'admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def team_billable_info(token: str, user: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/team.info',
    description=""" Gets information about the current team. """,
    tags=['admin_team_management', 'admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def team_info(token: str, team: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/team.integrationLogs',
    description=""" Gets the integration logs for the current team. """,
    tags=[
        'admin_app_management',
        'apps_permissions_management',
        'apps_permission_management',
        'authentication_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def team_integration_logs(
    token: str,
    app_id: Optional[str] = None,
    change_type: Optional[str] = None,
    count: Optional[str] = None,
    page: Optional[str] = None,
    service_id: Optional[str] = None,
    user: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/team.profile.get',
    description=""" Retrieve a team's profile. """,
    tags=['admin_user_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def team_profile_get(token: str, visibility: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/usergroups.create',
    description=""" Create a User Group """,
    tags=['authentication_management', 'apps_permission_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def usergroups_create(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/usergroups.disable',
    description=""" Disable an existing User Group """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def usergroups_disable(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/usergroups.enable',
    description=""" Enable a User Group """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def usergroups_enable(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/usergroups.list',
    description=""" List all User Groups for a team """,
    tags=['admin_user_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def usergroups_list(
    include_users: Optional[bool] = None,
    token: str = ...,
    include_count: Optional[bool] = None,
    include_disabled: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/usergroups.update',
    description=""" Update an existing User Group """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def usergroups_update(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/usergroups.users.list',
    description=""" List all users in a User Group """,
    tags=[
        'admin_usergroup_management',
        'usergroup_management',
        'usergroups_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def usergroups_users_list(
    token: str, include_disabled: Optional[bool] = None, usergroup: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/usergroups.users.update',
    description=""" Update the list of users for a User Group """,
    tags=['admin_user_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def usergroups_users_update(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users.conversations',
    description=""" List conversations the calling user may access. """,
    tags=[
        'admin_user_management',
        'user_management',
        'authentication_management',
        'apps_permissions_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_conversations(
    token: Optional[str] = None,
    user: Optional[str] = None,
    types: Optional[str] = None,
    exclude_archived: Optional[bool] = None,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users.deletePhoto',
    description=""" Delete the user profile photo """,
    tags=['admin_user_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_delete_photo(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users.getPresence',
    description=""" Gets user presence information. """,
    tags=['authentication_management', 'admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_get_presence(token: str, user: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users.identity',
    description=""" Get a user's identity. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_identity(token: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users.info',
    description=""" Gets information about a user. """,
    tags=['admin_user_management', 'authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_info(
    token: str, include_locale: Optional[bool] = None, user: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users.list',
    description=""" Lists all users in a Slack team. """,
    tags=['apps_permissions_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_list(
    token: Optional[str] = None,
    limit: Optional[int] = None,
    cursor: Optional[str] = None,
    include_locale: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users.lookupByEmail',
    description=""" Find a user with an email address. """,
    tags=['authentication_management', 'admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_lookup_by_email(token: str, email: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users.profile.get',
    description=""" Retrieves a user's profile information. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_profile_get(
    token: str, include_labels: Optional[bool] = None, user: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users.profile.set',
    description=""" Set the profile information for a user. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_profile_set(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users.setActive',
    description=""" Marked a user as active. Deprecated and non-functional. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_set_active(token: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users.setPhoto',
    description=""" Set the user profile photo """,
    tags=['admin_user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_set_photo(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users.setPresence',
    description=""" Manually sets user presence. """,
    tags=['authentication_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def users_set_presence(token: str, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/views.open',
    description=""" Open a view for a user. """,
    tags=['views_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def views_open(token: str, trigger_id: str = ..., view: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/views.publish',
    description=""" Publish a static view for a User. """,
    tags=['views_handling', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def views_publish(
    token: str, user_id: str = ..., view: str = ..., hash: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/views.push',
    description=""" Push a view onto the stack of a root view. """,
    tags=['views_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def views_push(token: str, trigger_id: str = ..., view: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/views.update',
    description=""" Update an existing view. """,
    tags=['views_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def views_update(
    token: str,
    view_id: Optional[str] = None,
    external_id: Optional[str] = None,
    view: Optional[str] = None,
    hash: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/workflows.stepCompleted',
    description=""" Indicate that an app's step in a workflow completed execution. """,
    tags=['workflows_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def workflows_step_completed(
    token: str, workflow_step_execute_id: str = ..., outputs: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/workflows.stepFailed',
    description=""" Indicate that an app's step in a workflow failed to execute. """,
    tags=['workflows_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def workflows_step_failed(
    token: str, workflow_step_execute_id: str = ..., error: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/workflows.updateStep',
    description=""" Update the configuration for a workflow extension step. """,
    tags=['workflows_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def workflows_update_step(
    token: str,
    workflow_step_edit_id: str = ...,
    inputs: Optional[str] = None,
    outputs: Optional[str] = None,
    step_name: Optional[str] = None,
    step_image_url: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
